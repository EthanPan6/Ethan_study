"use strict";

//1. 赋值方式
var billion = 1000000000; //通常

var billion2 = 1e9; //科学计数法

var num1 = 7.3e5; //730000

var num2 = 1e-6; //0.000001

var num3 = 0xff; //十六进制255

var num4 = 255; //二进制255

var num5 = 255; //八进制
//其他进制用函数 parseInt
//2. 常用方法

/*
toString(base)
方法 num.toString(base) 返回在给定 base 进制数字系统中 num 的字符串表示形式。

常见的用例如下：

base=16 用于十六进制颜色，字符编码等，数字可以是 0..9 或 A..F。

base=2 主要用于调试按位操作，数字可以是 0 或 1。

base=36 是最大进制，数字可以是 0..9 或 A..Z。
所有拉丁字母都被用于了表示数字。
对于 36 进制来说，一个有趣且有用的例子是，当我们需要将一个较长的数字标识符转换成较短的时候，例如做一个短的 URL。
可以简单地使用基数为 36 的数字系统表示
alert( 123456..toString(36) ); // 2n9c

如果我们放置一个点：123456.toString(36)，那么就会出现一个 error，因为 JavaScript 语法隐含了第一个点之后的部分为小数部分。如果我们再放一个点，那么 JavaScript 就知道小数部分为空，现在使用该方法。

也可以写成 (123456).toString(36)。
*/

var num6 = 255;
console.log(num6.toString(16), num6.toString(2)); //ff  11111111

/*
取舍方法：

Math.floor
向下舍入：3.1 变成 3，-1.1 变成 -2。

Math.ceil
向上舍入：3.1 变成 4，-1.1 变成 -1。

Math.round
向最近的整数舍入：3.1 变成 3，3.6 变成 4，-1.1 变成 -1。

Math.trunc（IE 浏览器不支持这个方法）
移除小数点后的所有内容而没有舍入：3.1 变成 3，-1.1 变成 -1。

取小数点后n位(2位)

1. 乘除法
 num/=100

2. number.toFixed(n)法的结果是一个字符串。如果小数部分比所需要的短，则在结尾添加零
我们可以使用一元加号或 Number() 调用，将其转换为数字：+ num.toFixed(5)。

*/